#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <200>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        escc {
            bindings = <&kp ESC>;
            key-positions = <17 18>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <30 40>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <31 40>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <16 20>;
        };

        doublequote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <21 16>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <28 35>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <28 47>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <28 44>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <28 45>;
        };

        leftbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <32 40>;
        };

        rightbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 40>;
        };

        lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <40 44>;
        };

        greaterthan {
            bindings = <&kp GREATER_THAN>;
            key-positions = <40 45>;
        };

        altf4 {
            bindings = <&kp LA(F4)>;
            key-positions = <12 5>;
        };

        togglebleusb {
            bindings = <&out OUT_TOG>;
            key-positions = <37 26>;
        };

        altleft {
            bindings = <&kp LA(LEFT)>;
            key-positions = <12 45>;
        };

        altright {
            bindings = <&kp LA(RIGHT)>;
            key-positions = <12 47>;
        };

        out-toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <37 26>;
        };

        bt1 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <37 12>;
        };

        bt2 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <37 13>;
        };

        alt1 {
            bindings = <&kp LA(NUMBER_1)>;
            key-positions = <12 1>;
        };

        alt2 {
            bindings = <&kp LA(NUMBER_2)>;
            key-positions = <12 2>;
        };

        alt3 {
            bindings = <&kp LA(NUMBER_3)>;
            key-positions = <12 3>;
        };

        alt4 {
            bindings = <&kp LA(NUMBER_4)>;
            key-positions = <12 4>;
        };

        ctrlwin0 {
            bindings = <&kp LC(LG(N0))>;
            key-positions = <0 5>;
        };

        ctrlwin1 {
            bindings = <&kp LC(LG(NUMBER_1))>;
            key-positions = <1 5>;
        };

        ctrlwin2 {
            bindings = <&kp LC(LG(NUMBER_2))>;
            key-positions = <2 5>;
        };

        ctrlwin3 {
            bindings = <&kp LC(LG(NUMBER_3))>;
            key-positions = <3 5>;
        };

        ctrlwin4 {
            bindings = <&kp LC(LG(NUMBER_4))>;
            key-positions = <4 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&mt LC(LA(F)) ESCAPE   &mt LS(LCTRL) LA(R)  &mt LS(LEFT_ALT) LC(T)  &mt LS(LEFT_WIN) LC(LA(V))  &mt LC(LEFT_ALT) LC(LA(R))  &mt LC(LEFT_WIN) LC(B)    &mt LA(LEFT_WIN) V  &mt LS(LC(LEFT_ALT)) P  &mt LS(LC(LEFT_WIN)) LC(LA(M))  &mt LS(LA(LEFT_WIN)) LA(G)  &mt LC(LA(LEFT_WIN)) LA(S)  &mt LS(LC(LA(LEFT_WIN))) LA(X)
&mt LEFT_ALT LA(TAB)   &kp LC(W)            &kp LC(D)               &kp LS(E)                   &kp R                       &kp LC(LA(T))             &kp G               &kp U                   &kp N                           &kp LA(L)                   &kp LC(P)                   &mt CAPSLOCK LC(LA(M))
&mt LCTRL LC(LS(Z))    &kp LC(A)            &kp S                   &kp LC(LS(C))               &kp LC(F)                   &kp LS(F)                 &kp LC(LA(G))       &kp F2                  &kp QUESTION                    &kp LA(P)                   &to 3                       &lt 3 BACKSPACE
&mt LEFT_SHIFT DELETE  &lt 6 LC(Z)          &kp LC(LA(X))           &mt LS(LEFT_WIN) LC(C)      &kp LC(V)                   &mt LC(LEFT_WIN) LA(B)    &kp LC(LA(N))       &kp LC(M)               &kp LEFT                        &lt 4 DOWN                  &kp RIGHT                   &mt LEFT_SHIFT UP_ARROW
                                                                    &to 6                       &mkp LCLK                   &mkp RCLK                 &mt LWIN TAB        &kp SPACE
                                                                                                &lt 7 ENTER                 &kp SPACE                 &kp ENTER
            >;
        };

        layer_1 {
            bindings = <
&kp TILDE         &kp EXCLAMATION  &kp HASH      &kp DOLLAR    &kp DOLLAR    &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE
&kp GRAVE         &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp LBKT       &kp RBKT   &kp F1         &kp F2        &kp F3                &kp F4                 &kp DEL
&kp LEFT_CONTROL  &kp NUMBER_5     &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &none          &kp BSLH   &kp F5         &kp F6        &kp F7                &kp F8                 &kp PAGE_UP
&kp LSHFT         &kp NUMBER_9     &kp NUMBER_0  &kp MINUS     &kp EQUAL     &none          &trans     &kp F9         &kp F10       &kp F11               &kp F12                &kp PAGE_DOWN
                                                 &kp LEFT_WIN  &kp SPACE     &trans         &kp ENTER  &kp BACKSPACE
                                                               &none         &none          &trans
            >;
        };

        layer_2 {
            bindings = <
&kp F12           &kp F1      &kp F2      &kp F3         &kp F4         &kp F5          &kp F6        &kp F7         &kp F8    &kp F9     &kp F10  &kp F11
&kp LS(GRAVE)     &kp LS(N1)  &kp LS(N2)  &kp LS(N3)     &kp LS(N4)     &kp LS(LBKT)    &kp LS(RBKT)  &none          &trans    &none      &none    &trans
&kp LEFT_CONTROL  &kp LS(N5)  &kp LS(N6)  &kp LS(N7)     &kp LS(N8)     &none           &kp LS(BSLH)  &trans         &kp UP    &trans     &trans   &trans
&kp LEFT_SHIFT    &kp LS(N9)  &kp LS(N0)  &kp LS(MINUS)  &kp LS(EQUAL)  &none           &none         &kp LEFT       &kp DOWN  &kp RIGHT  &none    &trans
                                          &kp LEFT_ALT   &kp SPACE      &kp ENTER       &trans        &kp BACKSPACE
                                                         &trans         &trans          &none
            >;
        };

        Mouse {
            bindings = <
&kp ESCAPE             &mt LS(LCTRL) NUMBER_1  &mt LS(LEFT_ALT) NUMBER_2  &mt LS(LEFT_WIN) NUMBER_3  &mt LC(LEFT_ALT) NUMBER_4  &mt LC(LEFT_WIN) NUMBER_5    &mt LA(LEFT_WIN) NUMBER_6  &mt LS(LC(LEFT_ALT)) NUMBER_7  &mt LS(LC(LEFT_WIN)) NUMBER_8  &mt LS(LA(LEFT_WIN)) NUMBER_9  &mt LC(LA(LEFT_WIN)) NUMBER_0  &mt LS(LC(LA(LEFT_WIN))) DOT
&mt LEFT_ALT LA(TAB)   &kp Q                   &kp W                      &kp E                      &kp R                      &kp T                        &kp Y                      &kp U                          &kp I                          &kp O                          &kp P                          &mt LEFT_ALT MINUS
&mt LCTRL RIGHT_ALT    &kp A                   &kp S                      &kp D                      &kp F                      &kp G                        &kp H                      &kp J                          &kp K                          &kp L                          &to 0                          &lt 8 BACKSPACE
&mt LEFT_SHIFT DELETE  &lt 6 Z                 &kp X                      &kp C                      &kp V                      &kp B                        &kp N                      &kp M                          &lt 5 LEFT_ARROW               &lt 4 DOWN                     &kp RIGHT                      &mt LEFT_SHIFT UP_ARROW
                                                                          &lt 6 BACKSPACE            &mkp LCLK                  &mkp RCLK                    &mt LEFT_WIN PLUS          &kp SPACE
                                                                                                     &lt 7 ENTER                &kp SPACE                    &kp ENTER
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &mkp MCLK  &trans     &trans       &trans     &trans     &mkp MCLK  &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &trans     &mkp LCLK  &trans       &trans     &mkp LCLK  &trans     &mkp RCLK  &trans  &trans
                           &trans     &mkp LCLK  &mkp RCLK    &mkp RCLK  &mkp LCLK
                                      &trans     &trans       &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans       &trans     &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &mkp MCLK  &trans     &trans       &trans     &trans     &mkp MCLK  &trans     &trans  &trans
&kp B   &trans  &mkp RCLK  &trans     &mkp LCLK  &trans       &trans     &mkp LCLK  &trans     &mkp RCLK  &trans  &trans
                           &trans     &mkp LCLK  &mkp RCLK    &mkp RCLK  &mkp LCLK
                                      &trans     &trans       &trans
            >;
        };

        layer_6 {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4            &kp F5            &kp F6              &kp F7           &kp F8           &kp F9           &kp F10       &kp F11       &kp F12
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp LC(N7)        &kp LC(N8)        &kp LC(N9)          &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &bt BT_SEL 3  &bt BT_SEL 4  &kp PAGE_UP
&out OUT_BLE  &out OUT_USB  &out OUT_TOG  &kp LC(NUMBER_4)  &kp LC(N5)        &kp LC(NUMBER_6)    &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &kp KP_MINUS  &kp KP_DOT    &kp BACKSPACE
&kp ESCAPE    &trans        &bt BT_CLR    &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS   &kp KP_EQUAL  &kp PAGE_DOWN
                                          &trans            &kp S             &kp B               &kp RCTRL        &kp KP_NUMBER_0
                                                            &kp T             &kp R               &kp ENTER
            >;
        };

        layer_7 {
            bindings = <
&kp ESCAPE         &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans     &trans     &kp DELETE
&trans             &trans  &trans  &trans  &trans  &trans    &kp N7        &kp N8        &kp N9        &trans     &trans     &trans
&kp RIGHT_CONTROL  &trans  &trans  &trans  &trans  &trans    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS  &kp DOT    &kp BACKSPACE
&kp ESCAPE         &trans  &trans  &trans  &trans  &trans    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &kp EQUAL  &kp DELETE
                                   &kp S   &kp B   &kp T     &trans        &kp N0
                                           &trans  &kp R     &kp ENTER
            >;
        };

        layer_8 {
            bindings = <
&mt LC(LA(F)) ESCAPE   &mt LS(LCTRL) LA(R)  &mt LS(LEFT_ALT) LC(T)  &mt LS(LEFT_WIN) LC(LA(V))  &mt LC(LEFT_ALT) LC(LA(R))  &mt LC(LEFT_WIN) LC(B)    &mt LA(LEFT_WIN) V  &mt LS(LC(LEFT_ALT)) P  &mt LS(LC(LEFT_WIN)) LC(LA(M))  &mt LS(LA(LEFT_WIN)) LA(G)  &mt LC(LA(LEFT_WIN)) LA(S)  &mt LS(LC(LA(LEFT_WIN))) LA(X)
&mt LEFT_ALT LA(TAB)   &kp LC(W)            &kp LC(D)               &kp LS(E)                   &kp R                       &kp LC(LA(T))             &kp G               &kp U                   &kp N                           &kp LA(L)                   &kp LC(P)                   &mt CAPSLOCK LC(LA(M))
&mt LCTRL LC(LS(Z))    &kp LC(A)            &kp S                   &kp LC(LS(C))               &kp LC(F)                   &kp LS(F)                 &kp LC(LA(G))       &kp F2                  &kp QUESTION                    &kp LA(P)                   &trans                      &trans
&mt LEFT_SHIFT DELETE  &lt 6 LC(Z)          &kp LC(LA(X))           &mt LS(LEFT_WIN) LC(C)      &kp LC(V)                   &mt LC(LEFT_WIN) LA(B)    &kp LC(LA(N))       &kp LC(M)               &kp LEFT                        &lt 5 DOWN                  &kp RIGHT                   &mt LEFT_SHIFT UP_ARROW
                                                                    &to 6                       &mkp LCLK                   &mkp RCLK                 &mt LWIN TAB        &kp SPACE
                                                                                                &lt 7 ENTER                 &kp SPACE                 &kp ENTER
            >;
        };
    };
};
